// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rcpp_parallel_kernel_matrix
NumericMatrix rcpp_parallel_kernel_matrix(NumericMatrix& dataset, NumericMatrix& centroids, double std, std::string dataset_type);
RcppExport SEXP _RBFNN_rcpp_parallel_kernel_matrix(SEXP datasetSEXP, SEXP centroidsSEXP, SEXP stdSEXP, SEXP dataset_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type dataset(datasetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type centroids(centroidsSEXP);
    Rcpp::traits::input_parameter< double >::type std(stdSEXP);
    Rcpp::traits::input_parameter< std::string >::type dataset_type(dataset_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_parallel_kernel_matrix(dataset, centroids, std, dataset_type));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RBFNN_rcpp_parallel_kernel_matrix", (DL_FUNC) &_RBFNN_rcpp_parallel_kernel_matrix, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_RBFNN(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
